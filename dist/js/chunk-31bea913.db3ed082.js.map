{"version":3,"sources":["webpack:///./src/filters/numeral.js","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./node_modules/numeral/numeral.js","webpack:///./node_modules/core-js/internals/inherit-if-required.js","webpack:///./node_modules/core-js/modules/es.number.constructor.js"],"names":["formatNumber","num","numeral","Number","format","module","exports","requireObjectCoercible","whitespaces","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","String","replace","start","end","trim","global","factory","this","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","length","regexps","unformat","match","stringToNumber","version","obj","numberToFormat","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","Math","includes","indexOf","abbreviations","toString","split","toFixed","delimiters","slice","i","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","args","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","allSuffixes","concat","filter","item","unformatRegex","bytes","suffix","bytesMultiplier","symbols","before","after","exponential","toExponential","hours","floor","minutes","seconds","timeArray","isObject","setPrototypeOf","dummy","Wrapper","NewTarget","NewTargetPrototype","constructor","DESCRIPTORS","isForced","redefine","has","classof","inheritIfRequired","toPrimitive","fails","create","getOwnPropertyNames","f","getOwnPropertyDescriptor","defineProperty","NUMBER","NativeNumber","NumberPrototype","BROKEN_CLASSOF","toNumber","argument","first","third","radix","maxCode","digits","index","code","it","charCodeAt","NaN","parseInt","NumberWrapper","valueOf","keys","j"],"mappings":"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","file":"js/chunk-31bea913.db3ed082.js","sourcesContent":["// Paso 1\r\nimport numeral from 'numeral'\r\n\r\n// Paso 2\r\n// Función que recibe un argumento (Número o String numérico) y lo devuelve formateado\r\n// Si no hay numero, devolvemos 0\r\nconst formatNumber = (num) => {\r\n  if (!num) {\r\n    return 0\r\n  }\r\n  return numeral(Number(num)).format()\r\n}\r\n\r\n// Paso 3\r\nexport {\r\n  formatNumber\r\n}\r\n","// a string of all valid unicode whitespaces\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002' +\n  '\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.es/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","var isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar redefine = require('../internals/redefine');\nvar has = require('../internals/has');\nvar classof = require('../internals/classof-raw');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar create = require('../internals/object-create');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\n\n// Opera ~12 has broken Object#toString\nvar BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;\n\n// `ToNumber` abstract operation\n// https://tc39.es/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = it.charCodeAt(0);\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = it.slice(2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = digits.charCodeAt(index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.es/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var dummy = this;\n    return dummy instanceof NumberWrapper\n      // check on 1..constructor(foo) case\n      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)\n        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' +\n    // ESNext\n    'fromString,range'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}\n"],"sourceRoot":""}